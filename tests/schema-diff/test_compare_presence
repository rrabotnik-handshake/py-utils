from schema_diff.compare import _inject_presence_for_diff
from schema_diff.normalize import walk_normalize

def test_inject_presence_scalars_and_arrays():
    ref = {
        "id": "int",
        "name": "str",
        "tags": ["str"],
        "meta": {"active": "bool", "note": "str"},
    }
    required = {"id", "meta.active"}  # required paths
    injected = _inject_presence_for_diff(ref, required)
    n = walk_normalize(injected)

    # required stay plain
    assert n["id"] == "int"
    assert n["meta"]["active"] == "bool"

    # optional scalars/arrays gain '|missing'
    assert "missing" in n["name"]
    assert n["tags"] == "union(array|missing)"
    assert "missing" in n["meta"]["note"]

def test_compare_trees_plain_types_match(cfg_like):
    # pretend cfg.colors() etc; you can build a tiny stub or reuse your test harness
    from schema_diff.compare import compare_trees
    left = {"id": "int", "name": "str"}
    right = {"id": "int", "name": "str"}
    # Should print "No differences" and not crash
    compare_trees("L","R", left, set(), right, set(), cfg=cfg_like)
